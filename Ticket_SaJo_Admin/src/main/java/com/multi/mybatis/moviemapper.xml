<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.mapper.MovieMapper">

	<select id="select" parameterType="Integer" resultType="movieVO">
		SELECT m.id as id,m.gid as gid,g.name as gname,m.title as title, m.director as director, m.mainactor as mainactor,
		m.releasedate as releasedate, m.posterimg1 as posterimg1,m.posterimg2 as posterimg2, m.country as country,
		m.runningtime as runningtime, m.text as text, COUNT(r.id) as rcnt,ROUND(AVG(r.star),1) as star FROM movie m
		LEFT JOIN genre g ON g.id = m.gid
		LEFT JOIN reviews r ON r.mid=m.id
		GROUP BY id
		HAVING id = #{id}
	</select>
	<select id="selectall" resultType="movieVO">
		SELECT m.id as id,g.name as gname,m.title as title, m.director as director, m.mainactor as mainactor,
		m.releasedate as releasedate, m.posterimg1 as posterimg1,m.posterimg2 as posterimg2, m.country as country,
		m.runningtime as runningtime, m.text as text, COUNT(r.id) as rcnt,ROUND(AVG(r.star),1) as star FROM movie m
		LEFT JOIN genre g ON g.id = m.gid
	    LEFT JOIN reviews r ON r.mid=m.id
		GROUP BY id
	</select>
	<!-- 0715 김민식 추가 -->
	<select id="selectpage" parameterType="Integer" resultType="movieVO">
		SELECT m.id as id,g.name as gname,m.title as title, m.director as director, m.mainactor as mainactor,
		m.releasedate as releasedate, m.posterimg1 as posterimg1,m.posterimg2 as posterimg2, m.country as country,
		m.runningtime as runningtime, m.text as text, COUNT(r.id) as rcnt,ROUND(AVG(r.star),1) as star FROM movie m
		LEFT JOIN genre g ON g.id = m.gid
		LEFT JOIN reviews r ON r.mid=m.id
		GROUP BY id
		LIMIT #{mnum},10
	</select>
	<!-- 0720 김민식 추가 -->
	<select id="sortbyreleasedate" parameterType="Integer" resultType="movieVO">
		SELECT m.id as id,g.name as gname,m.title as title, m.director as director, m.mainactor as mainactor,
		m.releasedate as releasedate, m.posterimg1 as posterimg1,m.posterimg2 as posterimg2, m.country as country,
		m.runningtime as runningtime, m.text as text, COUNT(r.id) as rcnt,ROUND(AVG(r.star),1) as star FROM movie m
		LEFT JOIN genre g ON g.id = m.gid
		LEFT JOIN reviews r ON r.mid=m.id
		GROUP BY id
		ORDER BY releasedate ASC
		LIMIT #{mnum},3
	</select>
	<select id="sortbyrcnt" parameterType="Integer" resultType="movieVO">
		SELECT m.id as id,g.name as gname,m.title as title, m.director as director, m.mainactor as mainactor,
		m.releasedate as releasedate, m.posterimg1 as posterimg1,m.posterimg2 as posterimg2, m.country as country,
		m.runningtime as runningtime, m.text as text, COUNT(r.id) as rcnt,ROUND(AVG(r.star),1) as star FROM movie m
		LEFT JOIN genre g ON g.id = m.gid
		LEFT JOIN reviews r ON r.mid=m.id
		GROUP BY id
		ORDER BY rcnt DESC
		LIMIT #{mnum},3
	</select>
	<!-- 0726 김민식 추가 -->
	<select id="sortbyonmovie" parameterType="Integer" resultType="movieVO">
		select m.id as id,g.name as gname,m.title as title, m.director as director, m.mainactor as mainactor,
		m.releasedate as releasedate, m.posterimg1 as posterimg1,m.posterimg2 as posterimg2, m.country as country,
		m.runningtime as runningtime, m.text as text, COUNT(r.id) as rcnt,ROUND(AVG(r.star),1) as star FROM movie m
		INNER JOIN schedules s ON s.mid = m.id
		LEFT JOIN genre g ON g.id = m.gid
		LEFT JOIN reviews r ON r.mid=m.id
		Group BY m.id
		ORDER BY s.sdate
		LIMIT #{mnum},3;
	</select>

	<!-- 0713 안원영 추가 -->
	<select id="search" parameterType="map" resultType="movieVO">
		SELECT m.id, m.gid, m.title, m.director, m.mainactor, m.releasedate,
		m.posterimg1, m.posterimg2, m.country, m.runningtime, m.text,
		g.name as
		gname, g.tid as hgid,
		ROUND(AVG(r.star),1) as star, COUNT(mid) as rcnt
		FROM movie m
		INNER JOIN genre g ON m.gid=g.id
		INNER JOIN reviews r ON
		r.mid=m.id
		<where>
			<if test="searchfield == 'category'.toString()">
				g.name LIKE CONCAT('%',#{searchtxt},'%')
			</if>
			<if test="searchfield == 'actors'.toString()">
				m.mainactor LIKE CONCAT('%',#{searchtxt},'%')
			</if>
			<if test="searchfield == 'director'.toString()">
				m.director LIKE CONCAT('%',#{searchtxt},'%')
			</if>
			<if test="searchfield == 'country'.toString()">
				m.country LIKE CONCAT('%',#{searchtxt},'%')
			</if>
		</where>
		GROUP BY id;
	</select>

	<!-- 0713 안원영 추가 평점순 정렬 -->
	<select id="selectStarSort" resultType="movieVO">
		SELECT m.id, m.gid, m.title, m.director, m.mainactor, m.releasedate,
		m.posterimg1, m.posterimg2, m.country, m.runningtime, m.text,
		g.name as gname, g.tid as hgid,
		ROUND(AVG(r.star),1) as star ,COUNT(mid) as rcnt
		FROM movie m
		INNER JOIN genre g ON m.gid=g.id
		INNER JOIN reviews r ON r.mid=m.id
		GROUP BY id
		ORDER BY star DESC
		LIMIT 0, 6
	</select>

	<!-- 0714 안원영 추가 당일 상영 영화 -->
	<select id="todayMovieList" resultType="movieVO">
		SELECT m.id, m.gid, m.title, m.director, m.mainactor, m.releasedate,
		m.posterimg1, m.posterimg2, m.country, m.runningtime, m.text,
		g.name as gname, g.tid as hgid,
		ROUND(AVG(r.star),1) as star,
		s.id as sid, s.sdate as sdate
		FROM movie m
		INNER JOIN schedules s ON s.mid=m.id
		INNER JOIN genre g ON m.gid=g.id
		INNER JOIN reviews r ON r.mid=m.id
		WHERE s.sdate = DATE_FORMAT(sysdate(), '%Y-%m-%d')
		GROUP BY m.id
	</select>
	
	
		<!-- 0713 안원영 추가 평점순 정렬 -->
	<select id="selectrankpage" parameterType="map" resultType="movieVO">
		SELECT m.id, m.gid, m.title, m.director, m.mainactor, m.releasedate,
		m.posterimg1, m.posterimg2, m.country, m.runningtime, m.text,
		g.name as gname, g.tid as hgid,
		ROUND(AVG(r.star),1) as star ,COUNT(mid) as rcnt
		FROM movie m
		INNER JOIN genre g ON m.gid=g.id
		INNER JOIN reviews r ON r.mid=m.id
		GROUP BY id
		ORDER BY star DESC
		LIMIT #{mnum1},#{mnum2}
	</select>
	
		
	<!-- 0716 안원영 추가 - 리뷰 랭크의 행 갯수 -->
	<select id="selectrankcnt" resultType="Integer">
		SELECT COUNT(*) FROM (
		SELECT m.id, ROUND(AVG(r.star),1) as star 
		FROM movie m
		INNER JOIN reviews r ON r.mid=m.id
		GROUP BY id) c
	</select>




	<select id="selectschedules" resultType="movieVO">
		SELECT m.id as id, s.id
		as sid,s.tid as tid,s.sdate as sdate,
		ds.starttime as starttime,
		ds.endtime as endtime FROM movie m
		INNER JOIN schedules s ON s.mid=m.id
		INNER JOIN detail_schedules ds ON ds.sid = s.id
	</select>

	<insert id="insert" parameterType="movieVO">
		INSERT INTO movie VALUES
		(#{id},#{gid},#{title},#{director},#{mainactor},#{releasedate},#{posterimg1},#{posterimg2},#{country},#{runningtime},#{text})
	</insert>
	<update id="update" parameterType="movieVO">
		UPDATE movie SET
		gid=#{gid},title=#{title}, director=#{director},
		mainactor=#{mainactor},releasedate=#{releasedate},posterimg1=#{posterimg1},posterimg2=#{posterimg2},country=#{country},runningtime=#{runningtime},text=#{text}
		WHERE id=#{id}
	</update>
	<delete id="delete" parameterType="movieVO">
		DELETE FROM movie WHERE
		id=#{id}
	</delete>
</mapper>






